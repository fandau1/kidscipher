import { fileURLToPath } from 'url';
import fs from 'fs';
import path from 'path';
import { SVGIcons2SVGFontStream } from 'svgicons2svgfont';
import svg2ttf from 'svg2ttf';
import ttf2woff from 'ttf2woff';
import ttf2woff2 from 'ttf2woff2';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const INIT_GLYMP = 100; // <-- You can set starting Unicode here
const SVG_DIR = path.resolve(__dirname, 'svg');
const OUTPUT_DIR = path.resolve(__dirname, 'output');
const JS_TYPE_FILENAME = 'KidscipherGlyphs.js';
const JS_TYPE_FILE = path.join(OUTPUT_DIR, JS_TYPE_FILENAME);
const FONT_NAME = 'Kidscipher';

const PROJECT_OUTPUT_DIR = path.resolve(__dirname, '../../src/fonts');

const CSS_OUTPUT_PATH = path.join(OUTPUT_DIR, `${FONT_NAME}.css`);

// Ensure output folder exists
if (!fs.existsSync(OUTPUT_DIR)) fs.mkdirSync(OUTPUT_DIR, { recursive: true });

// Recursively get all SVG files
function getAllSVGFiles(dir) {
  let files = [];
  fs.readdirSync(dir).forEach((file) => {
    const fullPath = path.join(dir, file);
    const stat = fs.statSync(fullPath);
    if (stat.isDirectory()) {
      files = files.concat(getAllSVGFiles(fullPath));
    } else if (file.endsWith('.svg')) {
      files.push(fullPath);
    }
  });
  return files;
}

const svgFiles = getAllSVGFiles(SVG_DIR);

// Prepare JS enum lines
const lines = [
  `// Auto-generated by generate-font`,
  `const ${FONT_NAME}Glyphs = Object.freeze({`,
];

// Create SVG font stream
const fontStream = new SVGIcons2SVGFontStream({
  fontName: FONT_NAME,
  normalize: true,
});
const svgFontPath = path.join(OUTPUT_DIR, `${FONT_NAME}.svg`);
const writeStream = fs.createWriteStream(svgFontPath);
fontStream.pipe(writeStream);

let currentCode = INIT_GLYMP;

svgFiles.forEach((file) => {
  console.log(`Processing ${file}`);
  const glyphStream = fs.createReadStream(file);
  const filename = path
    .basename(file, '.svg')
    .toUpperCase()
    .replace(/\W+/g, '_');
  const unicodeChar = String.fromCharCode(currentCode);

  glyphStream.metadata = { unicode: [unicodeChar], name: filename };
  fontStream.write(glyphStream);

  lines.push(`  ${filename}: "\\u{${currentCode.toString(16)}}",`);
  currentCode++;
});

fontStream.end();

// Wait until SVG font is fully written
writeStream.on('finish', () => {
  console.log('SVG font created:', svgFontPath);

  // Read SVG font and convert to TTF
  const svgFont = fs.readFileSync(svgFontPath, 'utf-8');
  const ttfBuffer = Buffer.from(svg2ttf(svgFont, {}).buffer);
  const ttfPath = path.join(OUTPUT_DIR, `${FONT_NAME}.ttf`);
  fs.writeFileSync(ttfPath, ttfBuffer);
  console.log('TTF font created:', ttfPath);

  // Convert to WOFF / WOFF2
  fs.writeFileSync(
    path.join(OUTPUT_DIR, `${FONT_NAME}.woff`),
    Buffer.from(ttf2woff(ttfBuffer).buffer),
  );
  console.log('WOFF font created.');

  // Vytvoř WOFF2
  const woff2Buffer = ttf2woff2(ttfBuffer);
  fs.writeFileSync(path.join(OUTPUT_DIR, `${FONT_NAME}.woff2`), woff2Buffer);
  console.log(
    'WOFF2 font created:',
    path.join(OUTPUT_DIR, `${FONT_NAME}.woff2`),
  );

  // Write JS enum-like file
  lines.push('});');
  lines.push(`module.exports = { ${FONT_NAME}Glyphs };`);
  fs.writeFileSync(JS_TYPE_FILE, lines.join('\n'));
  console.log('JS Glyphs file generated:', JS_TYPE_FILE);

  // Zakóduj do Base64
  const woff2Base64 = woff2Buffer.toString('base64');

  // Vytvoř CSS s base64 WOFF2
  const cssContent = `@font-face {
    font-family: '${FONT_NAME}';
    src: url(data:font/woff2;base64,${woff2Base64}) format('woff2');
    font-weight: normal;
    font-style: normal;
}
`;

  fs.writeFileSync(CSS_OUTPUT_PATH, cssContent);
  console.log('CSS with WOFF2 base64 generated at:', CSS_OUTPUT_PATH);

  // Ensure the destination folder exists
  if (!fs.existsSync(PROJECT_OUTPUT_DIR))
    fs.mkdirSync(PROJECT_OUTPUT_DIR, { recursive: true });

  // Paths of generated files
  const filesToCopy = [
    //path.join(OUTPUT_DIR, `${FONT_NAME}.ttf`),
    //path.join(OUTPUT_DIR, `${FONT_NAME}.woff`),
    CSS_OUTPUT_PATH,
    JS_TYPE_FILE,
  ];

  // Copy files to src/fonts
  filesToCopy.forEach((filePath) => {
    const destPath = path.join(PROJECT_OUTPUT_DIR, path.basename(filePath));
    fs.copyFileSync(filePath, destPath);
    console.log(`Copied ${filePath} -> ${destPath}`);
  });
});
